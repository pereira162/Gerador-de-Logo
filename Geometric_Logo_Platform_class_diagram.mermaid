classDiagram
    class App {
        <<component>>
        +render() ReactNode
    }

    class AppRouter {
        <<component>>
        +render() ReactNode
    }

    class EditorScreen {
        <<component>>
        -activeView: string
        +handleViewChange(view: string): void
        +render() ReactNode
    }

    class EditingCanvas {
        <<component>>
        -canvasRef: React.RefObject
        -svgManager: SVGManager
        -project: Project
        -selectedElementId: string | null
        +componentDidMount(): void
        +componentDidUpdate(): void
        +handleSvgClick(elementId: string): void
        +render() ReactNode
    }

    class PropertiesPanel {
        <<component>>
        -isOpen: boolean
        -selectedElementId: string | null
        -selectedElementType: string | null
        -elementProperties: ElementProperties | null
        +togglePanel(): void
        +applyChanges(changes: Partial~ElementProperties~): void
        +resetProperties(): void
        +render() ReactNode
    }

    class ShapeProperties {
        <<component>>
        -elementId: string
        -properties: Partial~ElementProperties~
        +handleColorChange(colorType: string, value: string): void
        +handleOpacityChange(value: number): void
        +handleTransformChange(type: string, value: any): void
        +resetProperty(property: string): void
        +render() ReactNode
    }

    class TextProperties {
        <<component>>
        -textElementId: string
        -textElement: TextElement
        +handleTextChange(value: string): void
        +handleFontChange(font: string): void
        +handleSizeChange(size: number): void
        +handleStyleChange(style: object): void
        +handleColorChange(value: string): void
        +handleAlignmentChange(alignment: string): void
        +resetProperty(property: string): void
        +render() ReactNode
    }

    class SVGManager {
        <<service>>
        -instance: SVGManager
        -svgElement: SVGElement | null
        -svgContainer: HTMLElement | null
        -elementSelectCallback: function | null
        -editableElements: Map~string, SVGElement~
        +getInstance(): SVGManager
        +initialize(svgContent: string, containerId: string): void
        +cleanup(): void
        +setElementSelectCallback(callback: function): void
        +getElementStyle(elementId: string): object
        +setElementStyle(elementId: string, styles: object): void
        +getElementTransform(elementId: string): object
        +setElementTransform(elementId: string, transform: object): void
        +highlightElement(elementId: string): void
        +clearHighlight(): void
        +addTextElement(textElement: TextElement): string
        +updateTextElement(id: string, props: object): void
        +removeTextElement(id: string): void
        +getSVGContent(): string
        +rasterize(format: string, scale: number): Promise~string~
        -_setupEventHandlers(): void
        -_cleanupEventHandlers(): void
        -_parseTransform(transformString: string): object
        -_applyTransform(element: SVGElement, transform: object): void
    }

    class LogoStore {
        <<store>>
        -state: LogoState
        +getState(): LogoState
        +setState(partialState: Partial~LogoState~): void
        +createNewProject(templateId: string): void
        +loadProject(projectId: string): void
        +saveProject(): void
        +selectElement(elementId: string): void
        +selectTextElement(textElementId: string): void
        +clearSelection(): void
        +updateElementStyle(elementId: string, styles: object): void
        +updateElementTransform(elementId: string, transform: object): void
        +updateTextElement(id: string, props: object): void
        +addTextElement(initialProps: object): string
        +removeTextElement(id: string): void
        +exportAsSVG(): string
        +exportAsPNG(): Promise~string~
        +exportAsJPG(): Promise~string~
    }

    class UIStore {
        <<store>>
        -state: UIState
        +getState(): UIState
        +setState(partialState: Partial~UIState~): void
        +setActiveScreen(screen: string): void
        +setActiveTab(tab: string): void
        +togglePropertiesPanel(): void
        +openTemplateModal(): void
        +closeTemplateModal(): void
    }

    class ColorPicker {
        <<component>>
        -color: string
        -onChange: function
        -label: string
        +handleChange(color: string): void
        +render() ReactNode
    }

    class TransformControls {
        <<component>>
        -transform: Transform
        -onChange: function
        +handleTranslateChange(axis: string, value: number): void
        +handleScaleChange(axis: string, value: number): void
        +handleRotateChange(value: number): void
        +resetTransform(): void
        +render() ReactNode
    }

    class TemplateSelector {
        <<component>>
        -templates: Template[]
        -selectedTemplateId: string | null
        -onSelect: function
        +handleTemplateSelect(templateId: string): void
        +render() ReactNode
    }

    class ExportPanel {
        <<component>>
        -format: string
        -exportInProgress: boolean
        +handleFormatChange(format: string): void
        +handleExport(): Promise~void~
        +render() ReactNode
    }

    App --> AppRouter
    AppRouter --> EditorScreen
    EditorScreen --> EditingCanvas
    EditorScreen --> PropertiesPanel
    PropertiesPanel --> ShapeProperties
    PropertiesPanel --> TextProperties
    ShapeProperties --> ColorPicker
    ShapeProperties --> TransformControls
    TextProperties --> ColorPicker
    EditingCanvas ..> SVGManager: uses
    EditingCanvas ..> LogoStore: uses
    PropertiesPanel ..> LogoStore: uses
    PropertiesPanel ..> UIStore: uses
    EditorScreen ..> UIStore: uses
    ShapeProperties ..> LogoStore: uses
    TextProperties ..> LogoStore: uses