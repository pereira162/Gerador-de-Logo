Data de exportação: 22/05 às 02:52
Mapeamento de arquivos alterados/adicionados:
1. src/components/EditorScreen/ShapeProperties.jsx
2. src/components/EditorScreen/TextProperties.jsx

Mapeamento completo de arquivos (com pastas e subpastas):
1. .gitignore
2. Adding_New_SVG_Icons_Guide.md
3. Consolidated_Geometric_Logo_Design_Guide.md
4. Geometric_Logo_Platform_class_diagram.mermaid
5. Geometric_Logo_Platform_implementation_guide.md
6. Geometric_Logo_Platform_sequence_diagram.mermaid
7. Geometric_Logo_Platform_system_design.md
8. MVP_P0_Completion_Report.md
9. Platform_Functional_Technical_Specifications.md
10. README.md
11. Software_Architecture_Document.md
12. Technical_Development_Summary_for_MVP.md
13. alterados_22-05_02-52.txt
14. atualizar_repositorio.py
15. eslint.config.js
16. exportar_alterados.py
17. geometric_logo_platform_PRD.md
18. index.html
19. package-lock.json
20. package.json
21. pnpm-lock.yaml
22. postcss.config.js
23. public/assets/images/.gitkeep
24. public/assets/svg-templates/abstract-icon.svg
25. public/assets/svg-templates/circle-icon.svg
26. public/assets/svg-templates/curve-icon.svg
27. public/assets/svg-templates/grid-icon.svg
28. public/assets/svg-templates/hexagon-icon.svg
29. public/assets/svg-templates/lines-icon.svg
30. public/assets/svg-templates/spiral-icon.svg
31. public/assets/svg-templates/square-icon.svg
32. public/assets/svg-templates/star-icon.svg
33. public/assets/svg-templates/triangle-icon.svg
34. public/data/example.json
35. src/App.jsx
36. src/components/EditorScreen/ColorEditorPanel.jsx
37. src/components/EditorScreen/EditingCanvas.jsx
38. src/components/EditorScreen/EditorScreen.jsx
39. src/components/EditorScreen/PropertiesPanel.jsx
40. src/components/EditorScreen/ShapeProperties.jsx
41. src/components/EditorScreen/TextProperties.jsx
42. src/components/ExportScreen/ExportScreen.jsx
43. src/components/LogoCreator.jsx
44. src/components/LogoSelectionScreen/LogoSelectionScreen.jsx
45. src/components/SVGExporter.jsx
46. src/components/SVGPreview.jsx
47. src/components/SVGTemplateSelector.jsx
48. src/components/TypographyScreen/TypographyScreen.jsx
49. src/components/common/ColorPicker.jsx
50. src/components/common/TransformControls.jsx
51. src/index.css
52. src/main.jsx
53. src/services/ColorManager.jsx
54. src/services/ExportManager.jsx
55. src/services/FontManager.jsx
56. src/services/SVGManager.jsx
57. src/store/LogoStore.jsx
58. src/utils/SVGTemplates.jsx
59. tailwind.config.js
60. template_config.json
61. vite.config.js


--- [1] src/components/EditorScreen/ShapeProperties.jsx ---
// components/EditorScreen/ShapeProperties.jsx
import React from 'react';
import ColorPicker from '../common/ColorPicker';
import TransformControls from '../common/TransformControls';

/**
 * ShapeProperties component for editing SVG shape properties
 * @param {Object} props - Component props
 * @param {Object} props.element - The selected SVG element data
 * @param {Object} props.transform - The element's transform data
 * @param {function} props.onStyleChange - Function to call when style changes
 * @param {function} props.onTransformChange - Function to call when transforms change
 * @param {function} props.onReset - Function to call when reset button is clicked
 */
const ShapeProperties = ({ 
  element, 
  transform,
  onStyleChange, 
  onTransformChange,
  onReset 
}) => {
  if (!element) return null;

  // Handle opacity change
  const handleOpacityChange = (value) => {
    const numValue = Number(value);
    if (!isNaN(numValue)) {
      onStyleChange('opacity', numValue);
    }
  };
  
  // Handle color change
  const handleColorChange = (property, color) => {
    onStyleChange(property, color);
  };

  // Handle transform change
  const handleTransformChange = (property, value) => {
    onTransformChange(property, value);
  };

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-semibold mb-2">Shape Properties</h3>
        <div className="text-sm text-gray-500 mb-4">
          Type: <span className="font-medium">{element.type}</span>
        </div>

        {/* Fill Color */}
        {element.fill !== undefined && (
          <ColorPicker
            color={element.fill}
            onChange={(color) => handleColorChange('fill', color)}
            label="Fill Color"
            allowNone={true}
          />
        )}

        {/* Stroke Color */}
        {element.stroke !== undefined && (
          <ColorPicker
            color={element.stroke}
            onChange={(color) => handleColorChange('stroke', color)}
            label="Stroke Color"
            allowNone={true}
          />
        )}

        {/* Stroke Width */}
        {element.stroke !== 'none' && element.stroke !== undefined && (
          <div className="mb-3">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Stroke Width
            </label>
            <div className="flex items-center">
              <input 
                type="range" 
                min="0" 
                max="20" 
                step="0.5"
                value={element.strokeWidth || 0} 
                onChange={(e) => onStyleChange('strokeWidth', Number(e.target.value))}
                className="w-full"
              />
              <span className="ml-2 text-xs w-10">{element.strokeWidth || 0}px</span>
            </div>
          </div>
        )}

        {/* Opacity */}
        <div className="mb-4">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Opacity
          </label>
          <div className="flex items-center">
            <input 
              type="range" 
              min="0" 
              max="1" 
              step="0.01"
              value={element.opacity || 1} 
              onChange={(e) => handleOpacityChange(e.target.value)}
              className="w-full"
            />
            <span className="ml-2 text-xs w-10">{Math.round((element.opacity || 1) * 100)}%</span>
          </div>
        </div>
      </div>

      {/* Transformation Controls */}
      <div className="border-t pt-4">
        <TransformControls 
          transform={transform || {
            translateX: 0,
            translateY: 0,
            rotation: 0,
            scaleX: 1,
            scaleY: 1
          }}
          onChange={handleTransformChange}
          showRotation={true}
          showScale={true}
        />
      </div>

      {/* Reset Button */}
      <div className="border-t pt-4">
        <button 
          className="px-4 py-2 bg-red-50 text-red-600 hover:bg-red-100 rounded w-full"
          onClick={onReset}
        >
          Reset to Default
        </button>
      </div>
    </div>
  );
};

export default ShapeProperties;

--- [2] src/components/EditorScreen/TextProperties.jsx ---
// components/EditorScreen/TextProperties.jsx
import React from 'react';
import ColorPicker from '../common/ColorPicker';
import TransformControls from '../common/TransformControls';
import fontManager from '../../services/FontManager';

/**
 * TextProperties component for editing SVG text properties
 * @param {Object} props - Component props
 * @param {Object} props.element - The selected text element data
 * @param {Object} props.transform - The element's transform data
 * @param {function} props.onStyleChange - Function to call when style changes
 * @param {function} props.onTransformChange - Function to call when transforms change
 * @param {function} props.onContentChange - Function to call when text content changes
 * @param {function} props.onReset - Function to call when reset button is clicked
 */
const TextProperties = ({
  element,
  transform,
  onStyleChange,
  onTransformChange,
  onContentChange,
  onReset
}) => {
  if (!element) return null;

  // Get available fonts from FontManager
  const availableFonts = fontManager.getAvailableFonts() || [];

  // Handle text content change
  const handleContentChange = (e) => {
    onContentChange(e.target.value);
  };

  // Handle font family change
  const handleFontFamilyChange = (e) => {
    onStyleChange('fontFamily', e.target.value);
  };

  // Handle font size change
  const handleFontSizeChange = (value) => {
    const size = Number(value);
    if (!isNaN(size) && size > 0) {
      onStyleChange('fontSize', size);
    }
  };

  // Handle font weight change
  const handleFontWeightChange = (e) => {
    onStyleChange('fontWeight', e.target.value);
  };

  // Handle text alignment change
  const handleAlignmentChange = (alignment) => {
    onStyleChange('alignment', alignment);
  };

  // Handle opacity change
  const handleOpacityChange = (value) => {
    const opacity = Number(value);
    if (!isNaN(opacity)) {
      onStyleChange('opacity', opacity);
    }
  };

  // Handle color change
  const handleColorChange = (color) => {
    onStyleChange('fill', color);
  };
  
  // Handle transform change
  const handleTransformChange = (property, value) => {
    onTransformChange(property, value);
  };

  return (
    <div className="space-y-4">
      <div>
        <h3 className="text-lg font-semibold mb-2">Text Properties</h3>

        {/* Text Content */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Text Content
          </label>
          <textarea
            value={element.content || ''}
            onChange={handleContentChange}
            className="w-full border rounded p-2 text-sm"
            rows="2"
          />
        </div>

        {/* Font Family */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Font Family
          </label>
          <select
            value={element.fontFamily || 'Arial'}
            onChange={handleFontFamilyChange}
            className="w-full border rounded p-2 text-sm"
          >
            {availableFonts.map((font) => (
              <option key={font.family} value={font.family}>
                {font.family}
              </option>
            ))}
          </select>
        </div>

        {/* Font Size */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Font Size
          </label>
          <div className="flex items-center">
            <input 
              type="range" 
              min="8" 
              max="72" 
              step="1"
              value={element.fontSize || 24} 
              onChange={(e) => handleFontSizeChange(e.target.value)}
              className="w-full"
            />
            <input
              type="number"
              min="1"
              value={element.fontSize || 24}
              onChange={(e) => handleFontSizeChange(e.target.value)}
              className="ml-2 w-16 border rounded p-1 text-sm"
            />
          </div>
        </div>

        {/* Font Weight */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Font Weight
          </label>
          <select
            value={element.fontWeight || '400'}
            onChange={handleFontWeightChange}
            className="w-full border rounded p-2 text-sm"
          >
            <option value="300">Light (300)</option>
            <option value="400">Regular (400)</option>
            <option value="500">Medium (500)</option>
            <option value="700">Bold (700)</option>
          </select>
        </div>

        {/* Text Alignment */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Text Alignment
          </label>
          <div className="flex space-x-1">
            <button
              className={`flex-1 py-1 px-2 border rounded text-sm ${
                element.alignment === 'start' ? 'bg-blue-100 border-blue-300' : 'bg-white'
              }`}
              onClick={() => handleAlignmentChange('start')}
            >
              Left
            </button>
            <button
              className={`flex-1 py-1 px-2 border rounded text-sm ${
                (element.alignment === 'middle' || element.alignment === 'center') 
                  ? 'bg-blue-100 border-blue-300' 
                  : 'bg-white'
              }`}
              onClick={() => handleAlignmentChange('middle')}
            >
              Center
            </button>
            <button
              className={`flex-1 py-1 px-2 border rounded text-sm ${
                element.alignment === 'end' ? 'bg-blue-100 border-blue-300' : 'bg-white'
              }`}
              onClick={() => handleAlignmentChange('end')}
            >
              Right
            </button>
          </div>
        </div>

        {/* Text Color */}
        <ColorPicker
          color={element.fill || '#000000'}
          onChange={handleColorChange}
          label="Text Color"
          allowNone={false}
        />

        {/* Opacity */}
        <div className="mb-3">
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Opacity
          </label>
          <div className="flex items-center">
            <input 
              type="range" 
              min="0" 
              max="1" 
              step="0.01"
              value={element.opacity || 1} 
              onChange={(e) => handleOpacityChange(e.target.value)}
              className="w-full"
            />
            <span className="ml-2 text-xs w-10">{Math.round((element.opacity || 1) * 100)}%</span>
          </div>
        </div>
      </div>

      {/* Transformation Controls */}
      <div className="border-t pt-4">
        <TransformControls 
          transform={transform || {
            translateX: 0,
            translateY: 0,
            rotation: 0,
            scaleX: 1,
            scaleY: 1
          }}
          onChange={handleTransformChange}
          showRotation={true}
          showScale={true}
        />
      </div>

      {/* Reset Button */}
      <div className="border-t pt-4">
        <button 
          className="px-4 py-2 bg-red-50 text-red-600 hover:bg-red-100 rounded w-full"
          onClick={onReset}
        >
          Reset to Default
        </button>
      </div>
    </div>
  );
};

export default TextProperties;

